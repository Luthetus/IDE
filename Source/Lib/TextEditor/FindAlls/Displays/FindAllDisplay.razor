@using Clair.Common.RazorLib.Keys.Models;
@using Clair.Common.RazorLib.Tabs.Displays
@using Clair.Common.RazorLib.Reactives.Displays
@using Clair.Common.RazorLib.TreeViews.Displays
@using Clair.TextEditor.RazorLib.FindAlls.Models;

@{
    var findAllState = TextEditorService.GetFindAllState();
    var appOptionsState = TextEditorService.CommonService.GetAppOptionsState();
}

<div class="ci_te_find-all">
    <div class="ci_te_find-all-body">

		<div class="ci_te_find-all-search-query">
			SearchQuery:&nbsp;
			<input class="ci_ide_input ci_ide_input-text"
				   style="width: 100%;"
				   placeholder="@nameof(SearchQuery)"
				   @bind="SearchQuery"
				   @bind:event="oninput" />
		</div>

		@*<div class="ci_te_find-all-starting-directory-path">
			StartingDirectoryPath:&nbsp;
			<input class="ci_ide_input ci_ide_input-text"
				   style="width: 100%;"
				   placeholder="@nameof(StartingDirectoryPath)"
				   @bind="StartingDirectoryPath"
				   @bind:event="oninput" />
		</div>*@

		<button class="ci_button"
                @onclick="DoSearchOnClick">
            Find in Solution
        </button>
		
		<div>Results: @($"{findAllState.SearchResultList.Count:N0}")</div>
	
		<div class="ci_te_search-engine-file-system-results" style="height: 300px;">
		    @if (findAllState.Exception)
		    {
		        @findAllState.Exception.ToString()
		    }
		    else
		    {
                <TreeViewContainerDisplay TreeViewContainerKey="TextEditorService.TextEditorFindAllState.TreeViewFindAllContainerKey"/>
            }
		</div>
    </div>
</div>
